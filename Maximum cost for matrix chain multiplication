#include<iostream>
#include<vector>
#include<limits.h>
using namespace std;

void print_parenthesis(const vector<vector<int>>& s, int i, int j)
{
    if(i == j){
        cout << "A" << i;
    }
    else{
        cout << "(";
        print_parenthesis(s, i, s[i][j]);
        print_parenthesis(s, s[i][j]+1, j);
        cout << ")";
    }
}

void matrix_chain_topdown(int n,const vector<int>& cost){

    // 2 tables c table for storing cost and p table for storing position
    vector<vector<int>> c(n, vector<int>(n));
    vector<vector<int>> p(n, vector<int>(n));
    for(int a=0;a<n;a++){
        // diagonal matrix traversal
            int i=0;
            int j=a;
        for(int k=0;k<n;k++){
            if(i==j || i==0 || j==0){
                // set diagonal elements as 0 since cost of multiplying single matrix is 0
                c[i][j]=0;
                p[i][j]=0;
            }
            else{
                // main logic
                int min=INT_MIN;
                int pos=0;
                for(int k=i;k<j;k++){
                    int temp=c[i][k]+c[k+1][j]+(cost[i-1]*cost[k]*cost[j]);
                    if(temp>min){
                    min=temp;
                    pos=k;
                    }
                }
            c[i][j]=min;
            p[i][j]=pos;
            }
            //cout<<"pos : "<<i<<j<<endl;
            i++;
            j++;
            if(j==n)
            break;
        }
    }
    
    // print the tables
    for(int i=1;i<n;i++){
        for(int j=i+1;j<n;j++){
            cout<<c[i][j]<<" ";
        }
        if(i!=n-1)
        cout<<endl;
    }
    for(int i=1;i<n;i++){
        for(int j=i+1;j<n;j++){
            cout<<p[i][j]<<" ";
        }
        if(i!=n-1)
        cout<<endl;
    }
    cout<<c[1][n-1];
    cout<<endl;
    print_parenthesis(p,1,n-1);
}

int main(){
    int n;
    cin >> n;
    vector<int> cost(n);
    for(int i = 0; i < n; i++){
        cin >> cost[i];
    }
    matrix_chain_topdown(n, cost);
    return 0;
}
